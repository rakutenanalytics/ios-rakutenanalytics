# Import base_config from git
import_from_git(url: 'https://github.com/rakutentech/ios-buildconfig.git')

platform :ios do
  desc "Build everything"
  lane :ci do |options|
    shared_tests(options)
    shared_sample(options)
  end

  desc "Build and release public framework, options are 'version' (string, mandatory), 'release' (boolean, defaults false), 'skip_build' (boolean), 'skip_upload' (boolean), 'skip_pod_push' (boolean), 'target_branch'"
  lane :deploy_framework do |options|
    version = options[:version]
    podspecPath = "RakutenAnalyticsSDK/RAnalytics.podspec"
    podspecVersion = version_get_podspec(path: podspecPath)
    isSnapshot = !options[:release]
    UI.user_error!("The passed in version parameter #{version || "NONE"} and podspec version #{podspecVersion} must match") unless version == podspecVersion
    
    build_framework(version: version) unless options[:skip_build]
    sh "ls ../RakutenAnalyticsSDK/RAnalytics*.zip"

    commit_message = "Built from internal commit #{last_git_commit[:commit_hash]}"
    release_name = "Public Analytics SDK Release v#{version}"

    skip_upload = options[:skip_upload] || false
    skip_pod_push = options[:skip_pod_push] || false
    
    release_description = "\n\n#{commit_message}\n" + File.read("changelog") rescue commit_message
    target_branch = options[:target_branch] || "master"
    private_assets = [
      "RakutenAnalyticsSDK/RAnalyticsRelease-v#{version}.zip", 
      "RakutenAnalyticsSDK/RAnalyticsDebug-v#{version}.zip",
      "RakutenAnalyticsSDK/RAnalyticsDebug_dSYM-v#{version}.zip",
      "RakutenAnalyticsSDK/RAnalyticsRelease_dSYM-v#{version}.zip",
    ]

    if isSnapshot
      snapshot_repo = "rakutentech/ios-analytics-framework-snapshots"
      UI.message "Upload snapshot '#{release_name}' to GitHub repo #{snapshot_repo}, branch #{target_branch}"
      UI.message "Commit message: #{commit_message}"

      github_release = set_github_release(
        repository_name: snapshot_repo,
        api_token: ENV["SNAPSHOT_GITHUB_TOKEN"],
        name: "[Snapshot] " + release_name,
        tag_name: version,
        description: release_description,
        commitish: target_branch,
        upload_assets: private_assets
      ) unless skip_upload

      UI.success "Successfully released snapshot v#{version}"
    else
      # release mode i.e. snapshot=false
      private_repo = "ssed/ios-analytics-private-artifacts"
      UI.message "Upload PRIVATE artifacts to on-prem GHE repo: #{private_repo}, branch: #{target_branch}, description: #{release_description}"

      # upload all artifacts to private repo on GHE
      github_release = set_github_release(
        server_url: "https://ghe.rakuten-it.com/api/v3",
        repository_name: private_repo,
        api_token: ENV["RELEASE_GHE_TOKEN"],
        name: release_name,
        tag_name: version,
        description: release_description,
        commitish: target_branch,
        upload_assets: private_assets
      ) unless skip_upload

      public_repo = "rakutentech/ios-analytics-framework"
      UI.message "Upload PUBLIC artifacts to GitHub repo: #{public_repo}, branch #{target_branch}, description: #{release_description}"

      # upload RELEASE framework to public GitHub repo and lint/push podspec
      github_release = set_github_release(
        repository_name: public_repo,
        api_token: ENV["RELEASE_GITHUB_TOKEN"],
        name: release_name,
        tag_name: version,
        description: release_description,
        commitish: target_branch,
        upload_assets: ["RakutenAnalyticsSDK/RAnalyticsRelease-v#{version}.zip"]
      ) unless skip_upload

      unless skip_pod_push
        pod_lib_lint(podspec: podspecPath, allow_warnings: true) 
        pod_push(path: podspecPath, allow_warnings: true)
      end

      UI.success "Successfully released v#{version}"
    end
  end
end

# vim:syntax=ruby:et:sts=2:sw=2:ts=2:ff=unix:
