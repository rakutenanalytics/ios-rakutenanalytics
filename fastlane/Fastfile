# Import base_config from git
import_from_git(url: 'https://github.com/rakutentech/ios-buildconfig.git')

platform :ios do
  desc "Build everything"
  lane :ci do |options|
    shared_tests(options)
    build_sample(options)
  end

  desc "Build sample"
  lane :build_sample do |options|
    podspec = "RakutenAnalyticsSDK/RAnalytics.podspec"
    version = version_get_podspec(path: podspec)

    # ensure clean install
    sh "rm -rf ../Samples/RAnalytics.zip"
    sh "rm -rf ../Samples/Pods;rm -f ../Samples/Podfile.lock"
    sh "pod cache clean RAnalytics --all"

    build_framework(version: version) unless options[:skip_build]

    # copy specifc version's framework zip to the Samples folder
    sh "cp ../RakutenAnalyticsSDK/RAnalyticsDebug-v#{version}.zip ../Samples/RAnalytics.zip"

    # for `pod install` cocoapods needs the podspec included in the zip 
    sh "zip -urj ../Samples/RAnalytics.zip ../#{podspec}"

    shared_sample(options)
  end

  # Upload sample
  desc "Upload sample - note: build_sample must be run prior"
  lane :upload_sample do |options|
    appcenter_upload(app_name: "RSDKAnalyticsSample", notify_testers: true, ipa: "./artifacts/device/RAnalyticsSample.ipa", dsym: "./artifacts/device/RAnalyticsSample.app.dSYM.zip")
  end

  desc "Build and release public framework, options are 'version' (string, mandatory), 'release' (boolean, defaults false), 'skip_build' (boolean), 'skip_upload' (boolean), 'skip_pod_push' (boolean), 'target_branch'"
  lane :deploy_framework do |options|
    version = options[:version]
    podspecPath = "RakutenAnalyticsSDK/RAnalytics.podspec"
    podspecVersion = version_get_podspec(path: podspecPath)
    isSnapshot = !options[:release]
    UI.user_error!("The passed in version parameter #{version || "NONE"} and podspec version #{podspecVersion} must match") unless version == podspecVersion
    
    build_framework(version: version) unless options[:skip_build]
    sh "ls ../RakutenAnalyticsSDK/RAnalytics*.zip"

    commit_message = "Built from internal commit #{last_git_commit[:commit_hash]}"
    release_name = "Public Analytics SDK Release v#{version}"

    skip_upload = options[:skip_upload] || false
    skip_pod_push = options[:skip_pod_push] || false
    
    release_description = "\n\n#{commit_message}\n" + File.read("changelog") rescue commit_message
    target_branch = options[:target_branch] || "master"
    private_assets = [
      "RakutenAnalyticsSDK/RAnalyticsRelease-v#{version}.zip", 
      "RakutenAnalyticsSDK/RAnalyticsDebug-v#{version}.zip",
      "RakutenAnalyticsSDK/RAnalyticsDebug_dSYM-v#{version}.zip",
      "RakutenAnalyticsSDK/RAnalyticsRelease_dSYM-v#{version}.zip",
    ]

    pod_lib_lint(podspec: podspecPath, allow_warnings: true)

    upload_swift_package(version: version, release: !isSnapshot, target_branch: target_branch) unless options[:skip_build] || skip_upload

    if isSnapshot
      snapshot_repo = "rakutentech/ios-analytics-framework-snapshots"
      UI.message "Upload snapshot '#{release_name}' to GitHub repo #{snapshot_repo}, branch #{target_branch}"
      UI.message "Commit message: #{commit_message}"

      github_release = set_github_release(
        repository_name: snapshot_repo,
        api_token: ENV["SNAPSHOT_GITHUB_TOKEN"],
        name: "[Snapshot] " + release_name,
        tag_name: version,
        description: release_description,
        commitish: target_branch,
        upload_assets: private_assets
      ) unless skip_upload

      unless skip_pod_push
        push_podspec(path: podspecPath, repo: snapshot_repo, token: ENV["SNAPSHOT_GITHUB_TOKEN"])
      end

      UI.success "Successfully released snapshot v#{version}"
    else
      # release mode i.e. snapshot=false
      private_repo = "ssed/ios-analytics-private-artifacts"
      UI.message "Upload PRIVATE artifacts to on-prem GHE repo: #{private_repo}, branch: #{target_branch}, description: #{release_description}"

      # upload all artifacts to private repo on GHE
      github_release = set_github_release(
        server_url: "https://ghe.rakuten-it.com/api/v3",
        repository_name: private_repo,
        api_token: ENV["RELEASE_GHE_TOKEN"],
        name: release_name,
        tag_name: version,
        description: release_description,
        commitish: target_branch,
        upload_assets: private_assets
      ) unless skip_upload

      public_repo = "rakutentech/ios-analytics-framework"
      UI.message "Upload PUBLIC artifacts to GitHub repo: #{public_repo}, branch #{target_branch}, description: #{release_description}"

      # upload RELEASE framework to public GitHub repo and push podspec
      github_release = set_github_release(
        repository_name: public_repo,
        api_token: ENV["RELEASE_GITHUB_TOKEN"],
        name: release_name,
        tag_name: version,
        description: release_description,
        commitish: target_branch,
        upload_assets: ["RakutenAnalyticsSDK/RAnalyticsRelease-v#{version}.zip"]
      ) unless skip_upload

      unless skip_pod_push
        push_podspec(path: podspecPath, repo: public_repo, token: ENV["RELEASE_GITHUB_TOKEN"])
      end

      UI.success "Successfully released v#{version}"
    end
  end

  desc "Push podspec to repository"
  lane :push_podspec do |options|
    podspecPath = options[:path]
    repo = options[:repo]
    pod_repo = "rakutentech-analytics-framework-push" # pod repos with "/" in the name don't work properly
    token = options[:token]

    UI.message "Removing existing pod repo"
    sh "bundle exec pod repo remove #{pod_repo} > /dev/null", error_callback: ->(result) { UI.message "Pod repo did not exist" }
    sh "bundle exec pod repo add #{pod_repo} https://#{token}@github.com/#{repo}.git"
    begin
      pod_push(path: podspecPath, repo:pod_repo, use_bundle_exec: true, allow_warnings: true)
    ensure
      sh "bundle exec pod repo remove #{pod_repo}"
    end
  end
end

# vim:syntax=ruby:et:sts=2:sw=2:ts=2:ff=unix:
