//
//  RNetworkBaseClient.h
//  RSDKSupport
//
//  Created by Zachary Radke on 1/10/14.
//  Copyright (c) 2014 Rakuten Inc. All rights reserved.
//

@import Foundation;

/**
 * @ingroup SupportConstants
 */
FOUNDATION_EXTERN NSTimeInterval const kRNetworkBaseClientDefaultTimeout;

@protocol RNetworkResponseSerializer, RNetworkRequestSerializer;
@class RNetworkOperation, RNetworkCertificateAuthenticator;

/**
 * A simple API client that will issue @ref RNetworkOperation requests. Configuration of the client will trickle down to all @ref RNetworkOperation objects generated by the client, allowing for simpler configuration. Users are encouraged to subclass this to fit the particular needs of a project. Specifically, #sharedClient can be overriden to return a pre-configured client.
 *
 * @class RNetworkBaseClient RNetworkBaseClient.h <RSDKSupport/RNetworkBaseClient.h>
 */
@interface RNetworkBaseClient : NSObject

/// @name Creating clients

/**
 * Singleton client.
 *
 * @return A singleton client.
 */
+ (instancetype)sharedClient;

/**
 * Generate a new client.
 *
 * @return A new instance of the receiver.
 */
+ (instancetype)client;

/**
 *  Convenience initializer that sets the #baseURL property of the new instance.
 *
 *  @param baseURL The base URL to use when making requests.
 *
 *  @return A new instance of the receiver.
 */
- (instancetype)initWithBaseURL:(NSURL *)baseURL;


/// @name Configuration

/**
 *  The base URL to make requests from. Any URL paths specified by methods are appended to this URL.
 */
@property (strong, nonatomic) NSURL *baseURL;

/**
 *  The timeout to use for any requests generated by the receiver. By default this is initialized to the #kRNetworkBaseClientDefaultTimeout constant.
 */
@property (assign, nonatomic) NSTimeInterval sharedTimeout;

/**
 *  The `NSURLCredential` to use for all requests generated by the receiver.
 */
@property (strong, nonatomic) NSURLCredential *sharedCredential;

/**
 *  The @ref RNetworkCertificateAuthenticator to use for all requests generated by the receiver.
 */
@property (strong, nonatomic) RNetworkCertificateAuthenticator *sharedCertificateAuthenticator;

/**
 *  The request serializer to use for all requests generated by the receiver. This is set to a new instance of @ref RNetworkRequestSerializer by default.
 */
@property (strong, nonatomic) id<RNetworkRequestSerializer> sharedRequestSerializer;

/**
 *  The response serializer to use for all requests generated by the receiver. This is set to a new instance of @ref RNetworkResponseSerializer by default.
 */
@property (strong, nonatomic) id<RNetworkResponseSerializer> sharedResponseSerializer;

/**
 *  The operation queue on which all enqueued network operations' completion handlers are executed. This is left as `nil` by default.
 */
@property (strong, nonatomic) NSOperationQueue *sharedCompletionQueue;


/**
 *  @name Issuing requests
 */

/**
 *  Generate and issue an RNetworkOperation from a given `NSURLRequest`. This method will configure the returned operation with the relevant configurations of the client.
 *
 *  @param request         `NSURLRequest` to issue. Should not be `nil`.
 *  @param completionBlock Optional completion block invoked by the operation on success or failure.
 *
 *  @return A new RNetworkOperation that has been configured and enqueued in the client.
 */
- (RNetworkOperation *)networkOperationWithRequest:(NSURLRequest *)request completionBlock:(void (^)(RNetworkOperation *operation, id responseObject, NSError *error))completionBlock;

/**
 *  Issue a `GET` request to the specified URL path. In RESTful APIs, these typically point to resources that cannot be changed by the request itself, and parameters are URI encoded.
 *
 *  @param URLPath         URL path to request. This is appended to #baseURL.
 *  @param parameters      Optional parameters to encode in the request.
 *  @param completionBlock Optional completion block invoked by the operation on success or failure.
 *
 *  @return A new RNetworkOperation that has been configured and enqueued in the client.
 */
- (RNetworkOperation *)GET:(NSString *)URLPath parameters:(id)parameters completionBlock:(void (^)(RNetworkOperation *operation, id responseObject, NSError *error))completionBlock;

/**
 *  Issue a `HEAD` request to the specified URL path. In RESTful APIs, this typically returns only header information with no body data, in which case the responseObject of the completion block will be `nil`, and parameters are URI encoded.
 *
 *  @param URLPath         URL path to request. This is appended to #baseURL.
 *  @param parameters      Optional parameters to encode in the request.
 *  @param completionBlock Optional completion block invoked by the operation on success or failure.
 *
 *  @return A new RNetworkOperation that has been configured and enqueued in the client.
 */
- (RNetworkOperation *)HEAD:(NSString *)URLPath parameters:(id)parameters completionBlock:(void (^)(RNetworkOperation *operation, id responseObject, NSError *error))completionBlock;

/**
 *  Issue a `POST` request to the specified URL path. In RESTful APIs, this typically is used to change or create resources, and parameters are form-data encoded.
 *
 *  @param URLPath         URL path to request. This is appended to #baseURL.
 *  @param parameters      Optional parameters to encode in the request.
 *  @param completionBlock Optional completion block invoked by the operation on success or failure.
 *
 *  @return A new RNetworkOperation that has been configured and enqueued in the client.
 */
- (RNetworkOperation *)POST:(NSString *)URLPath parameters:(id)parameters completionBlock:(void (^)(RNetworkOperation *operation, id responseObject, NSError *error))completionBlock;

/**
 *  Issue a `PUT` request to the specified URL path. In RESTful APIs, this typically is used to change or create resources, and parameters are form-data encoded.
 *
 *  @param URLPath         URL path to request. This is appended to #baseURL.
 *  @param parameters      Optional parameters to encode in the request.
 *  @param completionBlock Optional completion block invoked by the operation on success or failure.
 *
 *  @return A new RNetworkOperation that has been configured and enqueued in the client.
 */
- (RNetworkOperation *)PUT:(NSString *)URLPath parameters:(id)parameters completionBlock:(void (^)(RNetworkOperation *operation, id responseObject, NSError *error))completionBlock;

/**
 *  Issue a `DELETE` request to the specified URL path. In RESTful APIs, this typically is used to remove a resource, and parameters are URI encoded.
 *
 *  @param URLPath         URL path to request. This is appended to #baseURL.
 *  @param parameters      Optional parameters to encode in the request.
 *  @param completionBlock Optional completion block invoked by the operation on success or failure.
 *
 *  @return A new RNetworkOperation that has been configured and enqueued in the client.
 */
- (RNetworkOperation *)DELETE:(NSString *)URLPath parameters:(id)parameters completionBlock:(void (^)(RNetworkOperation *operation, id responseObject, NSError *error))completionBlock;


/**
 *  @name Queueing custom requests
 */

/**
 *  Attempt to enqueue a network operation in the client. If the operation is already executing or cancelled, it will not be added to the queue.
 *
 *  @param networkOperation Network operation to try and enqueue.
 *
 *  @return `YES` if the operation was successfully added to the queue, or `NO` otherwise.
 */
- (BOOL)queueNetworkOperation:(RNetworkOperation *)networkOperation;

@end
