//
//  RNetworkResponseSerializer.h
//  RSDKSupport
//
//  Created by Zachary Radke on 11/19/13.
//  Copyright (c) 2013 Rakuten Inc. All rights reserved.
//

@import Foundation;

/**
 * This protocol declares a baseline for serializers that can be used by
 * @ref RNetworkOperation. Two concrete implementations are provided, @ref RNetworkResponseSerializer and
 * @ref RJSONResponseSerializer.
 *
 * Implementers of this protocol should take a `NSURLResponse` and `NSData` instances and use them to
 * generate a serialized response object and/or a serialization error if an `NSError` pointer is
 * provided.
 *
 * @protocol RNetworkResponseSerializer RNetworkResponseSerializer.h <RSDKSupport/RNetworkResponseSerializer.h>
 */
@protocol RNetworkResponseSerializer <NSObject>
@required

/**
 * Method which converts `NSURLResponse` and `NSData` objects into a serialized response, with the option
 * of generating a serialization error.
 *
 * @param response The `NSURLResponse` generated by the network request.
 * @param data The `NSData` returned by the network request.
 * @param error A pointer to an `NSError` which can be populated with serialization errors. Conformers
 * should allow this parameter to be optional.
 */
- (id)responseObjectForResponse:(NSURLResponse *)response data:(NSData *)data error:(NSError **)error;

@end

/**
 * @ingroup SupportConstants
 */
FOUNDATION_EXTERN NSString *const RNetworkResponseErrorDomain;

/**
 * A concrete implementation of the `RNetworkResponseSerializer` protocol which focuses on response
 * validation rather than data serialization.
 *
 * @class RNetworkResponseSerializer RNetworkResponseSerializer.h <RSDKSupport/RNetworkResponseSerializer.h>
 */
@interface RNetworkResponseSerializer : NSObject <RNetworkResponseSerializer>

/// @name Generating serializers

/**
 * Generating a new instance.
 *
 * @return A new instance of the receiver.
 */
+ (instancetype)serializer;

/// @name Response Validation

/**
 * Index set of acceptable status codes
 *
 * Defaults to `+[NSIndexSet indexSetWithIndexesInRange:NSMakeRange(200, 100)]`.
 */
@property (strong, nonatomic) NSIndexSet *acceptableStatusCodes;

/// Set of acceptable content types
@property (strong, nonatomic) NSSet *acceptableContentTypes;

/**
 * Validation method.
 *
 * @param response The `NSHTTPURLResponse` to validate.
 * @param data     The `NSData` to validate.
 * @param error    Optional pointer to an `NSError` which will contain validation errors.
 * @return Whether validation succeeded or failed.
 */
- (BOOL)validateResponse:(NSHTTPURLResponse *)response data:(NSData *)data error:(NSError **)error;

@end

/**
 * Concrete implementation of the @ref RNetworkResponseSerializer-p protocol which subclasses
 * RNetworkResponseSerializer and focuses on data serialization.
 *
 * By default, the acceptableContentTypes property contains a set with:
 * - `application/json`
 * - `text/json`
 * - `text/javascript`
 *
 * @class RJSONResponseSerializer RNetworkResponseSerializer.h <RSDKSupport/RNetworkResponseSerializer.h>
 */
@interface RJSONResponseSerializer : RNetworkResponseSerializer

/// @name Generating a new serializer

/**
 * Factory method which takes `NSJSONReadingOptions` to use when serializing data.
 *
 * @return A new instance of the receiver.
 */
+ (instancetype)serializerWithJSONReadingOptions:(NSJSONReadingOptions)options;


/// @name Configuring serialization

/// The encoding to use when serializing `NSData` into JSON.
@property (assign, nonatomic) NSStringEncoding stringEncoding;

/// The `NSJSONReadingOptions` to use when serializing data.
@property (assign, nonatomic) NSJSONReadingOptions readingOptions;

@end
